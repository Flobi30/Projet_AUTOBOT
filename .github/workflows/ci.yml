name: Full CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Clean Python cache
        run: |
          find . -name "__pycache__" -type d -exec rm -rf {} +
          find . -name "*.pyc" -delete
          find . -name "*.pyo" -delete
          find . -name "*.pyd" -delete

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-distutils python3-dev

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install python-dotenv PyJWT python-multipart pyyaml torch gymnasium requests
          pip install -r requirements.txt
          pip install -r requirements.dev.txt
          pip install -e .

      - name: Run tests locally
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: pytest -q

      - name: Build Docker image
        run: |
          docker build --no-cache -t myorg/autobot:${{ github.sha }} .

      - name: Log in to Docker Hub
        if: github.event_name == 'push'
        env:
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin

      - name: Push Docker image
        if: github.event_name == 'push'
        run: |
          docker tag myorg/autobot:${{ github.sha }} myorg/autobot:latest
          docker push myorg/autobot:${{ github.sha }}
          docker push myorg/autobot:latest

  deploy-to-k8s:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Kubernetes
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        run: |
          echo "$KUBE_CONFIG_DATA" | base64 --decode > kubeconfig
          kubectl --kubeconfig=kubeconfig apply -f k8s/
